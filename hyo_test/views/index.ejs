<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>Socket.IO 예제</title>
    <script src="https://cdn.socket.io/4.6.0/socket.io.min.js" integrity="sha384-c79GN5VsunZvi+Q/WObgk2in0CbZsHnjEqvFxC5DxHn9lTfNce2WW6h2pH6u/kF+" crossorigin="anonymous"></script>
</head>
<body>
      <select id="roomoptions" onchange="joinRoom()">
               <option value="room1" selected>채팅방 1</option>
               <option value="room2">채팅방 2</option>
           </select>
    <ul id="messages" type="none">
        <li id="usercount"></li>
    </ul>

    <form id="msgform">
        <input id="msginput" autocomplete="off" type="text">
        <button type="submit">전송</button>
    </form>

    <!-- 방 목록 -->
    <button onclick="getRooms()">방 목록 가져오기</button>
    <p id="rooms"></p>

    <!-- <script src="/socket.io/socket.io.js"></script> -->
    <script>
        let roomname = "room1";
        let yourSocketId = '';
        const socket = io.connect();
        const msgform = document.getElementById('msgform');
        const roomsText = document.getElementById('rooms');
        // socket.on 함수로 서버에서 전달하는 신호를 수신
        socket.on('usercount', (count) => {
            const userCounter = document.getElementById('usercount');
            userCounter.innerText = "현재 " + count + "명이 서버에 접속해있습니다.";
        });

        let mySocektId = '';
        socket.on('info', (data) => {
            mySocektId = data;
            console.log('mySocektId', mySocektId);
        });

        // 메시지 수신시 HTML에 메시지 내용 작성
        socket.on('message', (msg) => {
            const messageList = document.getElementById('messages');
            const messageTag = document.createElement("li");
            messageTag.innerText = msg;
            messageList.appendChild(messageTag);
        });


               // 접속한 룸이 바뀌었을 때
       socket.on('roomChanged', (joinedRoom) => { 
           roomname = joinedRoom;
           var messageList = document.getElementById('messages');
           var messageTag = document.createElement("li");
           messageTag.innerText = joinedRoom + "에 접속했습니다.";
           messageList.appendChild(messageTag);
       });


        msgform.onsubmit = (e) => {
            e.preventDefault();
            const msginput = document.getElementById('msginput');

            // socket.emit으로 서버에 신호를 전달
            // socket.emit('message', msginput.value, roomname);
            if(userName === 'test1') {
                socket.emit('message', msginput.value, yourSocketId);
            } else {
                socket.emit('message', msginput.value, mySocektId);
            }

            msginput.value = "";
        };

        // 관리자 아이디 가진 경우에만 getRooms 실행
        const userName = prompt('아이디를 입력해주세요');
        if(userName === 'test1') {
            socket.emit('getRooms');
        }

        function getRooms() {
            socket.emit('getRooms');
        }
        socket.on('rooms', (data) => {
            console.log(data);
            let temp = '';
            temp += `<ul>`;
            for (let room in data) {
                // roomsText.innerHTML += room + "<br />";
                temp += `<li onclick="clickJoinRoom(this, '${room}')">${room}</li>`;
            }
            temp += `</ul>`;
            roomsText.innerHTML += temp;
        });

        function clickJoinRoom(e, socketId) {
            console.log(e);
            console.log(socketId);
            // console.log(e.target.value());
            yourSocketId = socketId;
            socket.emit('joinRoom', roomname, socketId);
        }

        function joinRoom() { // 방 접속 버튼 클릭시
           const roomOptions = document.getElementById("roomoptions");
           const roomToJoin = roomOptions.options[roomOptions.selectedIndex].value;

           // 서버에 룸 전환 신호를 발신
           socket.emit('joinRoom', roomname, roomToJoin);
       }
    </script>
</body>
</html>